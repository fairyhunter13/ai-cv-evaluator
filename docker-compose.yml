services:
  migrate:
    build:
      context: .
      dockerfile: Dockerfile.migrate
    image: ghcr.io/fairyhunter13/ai-cv-evaluator:dev-migrate
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./.env
    environment:
      - DB_URL=postgres://postgres:postgres@db:5432/app?sslmode=disable
    restart: "no"

  app:
    build: 
      context: .
      dockerfile: Dockerfile.server
    image: ghcr.io/fairyhunter13/ai-cv-evaluator:dev-server
    depends_on:
      migrate:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      qdrant:
        condition: service_started
      tika:
        condition: service_started
      redpanda:
        condition: service_healthy
    env_file:
      - ./.env
    environment:
      - APP_ENV=dev
      - MAX_UPLOAD_MB=1
      # Keep container port fixed at 8080; host port is configured in the ports mapping
      - PORT=8080
      - DB_URL=postgres://postgres:postgres@db:5432/app?sslmode=disable
      - KAFKA_BROKERS=redpanda:9092
      - QDRANT_URL=http://qdrant:6333
      - TIKA_URL=http://tika:9998
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
      - RATE_LIMIT_PER_MIN=200
    ports:
      - "${PORT:-8080}:8080"
    restart: unless-stopped

  frontend:
    build:
      context: ./admin-frontend
      dockerfile: Dockerfile
    image: ghcr.io/fairyhunter13/ai-cv-evaluator:dev-frontend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
    volumes:
      - ./admin-frontend:/app
      - /app/node_modules
    restart: unless-stopped

  worker:
    build: 
      context: .
      dockerfile: Dockerfile.worker
    image: ghcr.io/fairyhunter13/ai-cv-evaluator:dev-worker
    depends_on:
      migrate:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      redpanda:
        condition: service_healthy
      qdrant:
        condition: service_started
    env_file:
      - ./.env
    environment:
      - APP_ENV=dev
      - DB_URL=postgres://postgres:postgres@db:5432/app?sslmode=disable
      - KAFKA_BROKERS=redpanda:9092
      - QDRANT_URL=http://qdrant:6333
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
    restart: unless-stopped

  db:
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: app
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 3s
      retries: 10
    volumes:
      - db_data:/var/lib/postgresql/data

  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v24.3.1
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
      - --mode dev-container
      - --smp 1
      - --default-log-level=info
    ports:
      - "18081:18081"
      - "18082:18082"
      - "19092:19092"
      - "9644:9644"
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s
    volumes:
      - redpanda_data:/var/lib/redpanda/data

  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:v2.7.2
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
    ports:
      - "8090:8080"
    depends_on:
      - redpanda

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:6333/collections"]
      interval: 10s
      timeout: 3s
      retries: 10
    volumes:
      - qdrant_data:/qdrant/storage

  tika:
    image: apache/tika:2.9.0.0
    ports:
      - "9998:9998"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9998/version"]
      interval: 10s
      timeout: 3s
      retries: 10
    # Do not expose in prod; app connects via internal network only
    restart: unless-stopped

  otel-collector:
    image: otel/opentelemetry-collector:0.98.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./deploy/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"
      - "4318:4318"
    restart: unless-stopped
    depends_on:
      - jaeger

  jaeger:
    image: jaegertracing/all-in-one:1.57
    ports:
      - "16686:16686"

  prometheus:
    image: prom/prometheus:v2.53.0
    volumes:
      - ./deploy/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:11.1.0
    ports:
      - "3000:3000"
    volumes:
      - ./deploy/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./deploy/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./deploy/grafana/dashboards:/etc/grafana/dashboards:ro
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - prometheus

volumes:
  db_data:
  redpanda_data:
  qdrant_data: {}
