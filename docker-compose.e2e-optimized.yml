# Optimized Docker Compose for E2E Testing with Enhanced Parallelism
# This configuration enables true parallel execution of E2E tests

services:
  # Database service
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"

  # Vector database for embeddings
  qdrant:
    image: qdrant/qdrant:latest
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Message queue with optimized configuration for parallel processing
  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v24.3.1
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
      - --mode dev-container
      - --smp 2  # Increased CPU cores for better performance
      - --default-log-level=info
    ports:
      - "18081:18081"
      - "18082:18082"
      - "19092:19092"
      - "9644:9644"
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - redpanda_data:/var/lib/redpanda/data

  # Migration service
  migrate:
    build:
      context: .
      dockerfile: Dockerfile.migrate
    image: ghcr.io/fairyhunter13/ai-cv-evaluator:dev-migrate
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./.env
    environment:
      - DB_URL=postgres://postgres:postgres@db:5432/app?sslmode=disable
    restart: "no"

  # Main application with optimized settings
  app:
    build: 
      context: .
      dockerfile: Dockerfile.server
    image: ghcr.io/fairyhunter13/ai-cv-evaluator:dev-server
    depends_on:
      migrate:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      qdrant:
        condition: service_started
      redpanda:
        condition: service_healthy
    env_file:
      - ./.env
    environment:
      - APP_ENV=dev
      - MAX_UPLOAD_MB=1
      - PORT=8080
      - DB_URL=postgres://postgres:postgres@db:5432/app?sslmode=disable
      - KAFKA_BROKERS=redpanda:9092
      - QDRANT_URL=http://qdrant:6333
      - TIKA_URL=http://tika:9998
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
      - RATE_LIMIT_PER_MIN=200
      # Queue optimization settings
      - KAFKA_PARTITIONS=8
      - KAFKA_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPICS=true
    ports:
      - "${PORT:-8080}:8080"
    restart: unless-stopped

  # Multiple worker instances for parallel processing
  worker-1:
    build: 
      context: .
      dockerfile: Dockerfile.worker
    image: ghcr.io/fairyhunter13/ai-cv-evaluator:dev-worker
    depends_on:
      migrate:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      redpanda:
        condition: service_healthy
      qdrant:
        condition: service_started
    env_file:
      - ./.env
    environment:
      - APP_ENV=dev
      - DB_URL=postgres://postgres:postgres@db:5432/app?sslmode=disable
      - KAFKA_BROKERS=redpanda:9092
      - QDRANT_URL=http://qdrant:6333
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
      # Worker-specific settings for parallel processing
      - CONSUMER_MAX_CONCURRENCY=4
      - CONSUMER_GROUP_ID=ai-cv-evaluator-workers-1
      - CONSUMER_PARTITION_ASSIGNMENT=0,1
      - WORKER_ID=worker-1
    restart: unless-stopped

  worker-2:
    build: 
      context: .
      dockerfile: Dockerfile.worker
    image: ghcr.io/fairyhunter13/ai-cv-evaluator:dev-worker
    depends_on:
      migrate:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      redpanda:
        condition: service_healthy
      qdrant:
        condition: service_started
    env_file:
      - ./.env
    environment:
      - APP_ENV=dev
      - DB_URL=postgres://postgres:postgres@db:5432/app?sslmode=disable
      - KAFKA_BROKERS=redpanda:9092
      - QDRANT_URL=http://qdrant:6333
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
      # Worker-specific settings for parallel processing
      - CONSUMER_MAX_CONCURRENCY=4
      - CONSUMER_GROUP_ID=ai-cv-evaluator-workers-2
      - CONSUMER_PARTITION_ASSIGNMENT=2,3
      - WORKER_ID=worker-2
    restart: unless-stopped

  worker-3:
    build: 
      context: .
      dockerfile: Dockerfile.worker
    image: ghcr.io/fairyhunter13/ai-cv-evaluator:dev-worker
    depends_on:
      migrate:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      redpanda:
        condition: service_healthy
      qdrant:
        condition: service_started
    env_file:
      - ./.env
    environment:
      - APP_ENV=dev
      - DB_URL=postgres://postgres:postgres@db:5432/app?sslmode=disable
      - KAFKA_BROKERS=redpanda:9092
      - QDRANT_URL=http://qdrant:6333
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
      # Worker-specific settings for parallel processing
      - CONSUMER_MAX_CONCURRENCY=4
      - CONSUMER_GROUP_ID=ai-cv-evaluator-workers-3
      - CONSUMER_PARTITION_ASSIGNMENT=4,5
      - WORKER_ID=worker-3
    restart: unless-stopped

  worker-4:
    build: 
      context: .
      dockerfile: Dockerfile.worker
    image: ghcr.io/fairyhunter13/ai-cv-evaluator:dev-worker
    depends_on:
      migrate:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      redpanda:
        condition: service_healthy
      qdrant:
        condition: service_started
    env_file:
      - ./.env
    environment:
      - APP_ENV=dev
      - DB_URL=postgres://postgres:postgres@db:5432/app?sslmode=disable
      - KAFKA_BROKERS=redpanda:9092
      - QDRANT_URL=http://qdrant:6333
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
      # Worker-specific settings for parallel processing
      - CONSUMER_MAX_CONCURRENCY=4
      - CONSUMER_GROUP_ID=ai-cv-evaluator-workers-4
      - CONSUMER_PARTITION_ASSIGNMENT=6,7
      - WORKER_ID=worker-4
    restart: unless-stopped

  # Text extraction service
  tika:
    image: apache/tika:latest
    ports:
      - "9998:9998"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9998/version"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Monitoring and observability
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./deploy/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"
      - "4318:4318"
    depends_on:
      - redpanda

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./deploy/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deploy/grafana/provisioning:/etc/grafana/provisioning
      - ./deploy/grafana/dashboards:/var/lib/grafana/dashboards

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  # Redpanda Console for monitoring
  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:v2.7.2
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
    ports:
      - "9999:8080"
    depends_on:
      - redpanda

volumes:
  db_data:
  qdrant_data:
  redpanda_data:
  grafana_data: