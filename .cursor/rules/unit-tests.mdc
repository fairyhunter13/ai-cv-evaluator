---
alwaysApply: true
---

# Go Unit Test Requirements

## 🎯 Core Principle
**CRITICAL**: When ANY Go code changes, unit tests MUST be updated immediately. This ensures comprehensive test coverage and prevents regressions.

## 🔄 Automatic Test Updates

### Handling Breaking Changes
When code changes result in undefined/removed functions:
1. **Identify broken tests** - Find tests calling undefined functions
2. **Remove broken tests** - Delete tests that cannot be fixed
3. **Preserve coverage** - Ensure remaining tests maintain coverage
4. **Document changes** - Note what functionality was removed

### When to Update Tests
- **Function Changes**: Update all tests calling the modified function
- **Type/Struct Changes**: Update all tests using the modified type
- **Interface Changes**: Update all tests implementing or using the interface
- **Package Changes**: Update all tests importing the modified package
- **API Changes**: Update all tests interacting with modified APIs
- **Breaking Changes**: Remove tests that reference undefined/removed functions

### Test Update Checklist
1. ✅ **Identify affected tests** - Find all tests that use the changed code
2. ✅ **Update existing tests** - Modify tests to reflect code changes
3. ✅ **Remove broken tests** - Delete tests referencing undefined/removed functions
4. ✅ **Add new tests** - Create tests for new functionality
5. ✅ **Test edge cases** - Add tests for error conditions
6. ✅ **Verify coverage** - Ensure adequate test coverage
7. ✅ **Run test suite** - Execute all tests to verify they pass

## 🚀 Test Execution Standards

### Standard Test Command
```bash
go test -v -race -timeout=60s -failfast -parallel=4 ./...
```

### Required Flags
- `-v`: Verbose output (show test names and results)
- `-race`: Enable race condition detection
- `-timeout=60s`: 60-second timeout for all tests
- `-failfast`: Stop on first test failure
- `-parallel=4`: Run up to 4 tests in parallel

### Common Test Commands

#### Run All Tests
```bash
# Basic test run
go test -v -race -timeout=60s -failfast -parallel=4 ./...

# With coverage
go test -v -race -timeout=60s -failfast -parallel=4 -cover ./...

# Without cache
go test -v -race -timeout=60s -failfast -parallel=4 -count=1 ./...
```

#### Run Specific Tests
```bash
# Single package
go test -v -race -timeout=60s -failfast -parallel=4 ./internal/adapter/queue/redpanda

# Multiple packages
go test -v -race -timeout=60s -failfast -parallel=4 ./internal/... ./pkg/...

# Specific test function
go test -v -race -timeout=60s -failfast -parallel=4 -run TestConsumer ./internal/adapter/queue/redpanda
```

#### Additional Useful Flags
- `-count=1`: Disable test caching
- `-short`: Skip long-running tests
- `-cover`: Show coverage information
- `-coverprofile=coverage.out`: Generate coverage profile
- `-bench=.`: Run benchmark tests

#### Test Cleanup Commands
```bash
# Find tests with undefined function calls
grep -r "undefined\|not defined" --include="*_test.go" .

# Find tests calling specific functions
grep -r "functionName" --include="*_test.go" .

# Run tests to identify compilation errors
go test -v ./... 2>&1 | grep "undefined\|not defined"
```

## 📊 Test Quality Standards

### Coverage Requirements
- **New Code**: Minimum 80% line coverage
- **Critical Paths**: 100% coverage for business logic
- **Error Handling**: Test all error conditions
- **Integration**: Test all external dependencies

### Test Structure Best Practices
- **Unit Tests**: Test individual functions and methods
- **Integration Tests**: Test component interactions
- **Mocking**: Use mocks for external dependencies
- **Fixtures**: Use consistent test data
- **Naming**: Use descriptive test names (TestFunction_Scenario_ExpectedResult)

### Test Maintenance Rules
- **Update Immediately**: Update tests with every code change
- **Remove Broken Tests**: Delete tests that reference undefined/removed functions
- **Refactor Tests**: Refactor tests when code is refactored
- **Keep Current**: Maintain up-to-date test documentation
- **Monitor Performance**: Optimize test execution time

## ✅ Quality Gates

### Mandatory Checks
- **All Tests Pass**: No broken tests after code changes
- **No Undefined References**: Remove tests calling undefined/removed functions
- **Adequate Coverage**: Maintain minimum coverage requirements
- **Performance**: Tests complete within timeout limits
- **Reliability**: Tests are deterministic and repeatable

### Validation Commands
```bash
# Validate all tests pass
go test -v -race -timeout=60s -failfast -parallel=4 ./...

# Check test coverage
go test -v -race -timeout=60s -failfast -parallel=4 -cover ./...

# Run performance tests
go test -v -race -timeout=60s -failfast -parallel=4 -bench=. ./...
```

## 📝 Examples

### ✅ Correct Process
1. **Modify Go code** (function, type, interface, etc.)
2. **Find affected tests** using code analysis
3. **Remove broken tests** that reference undefined/removed functions
4. **Update existing tests** to reflect changes
5. **Add new tests** for new functionality
6. **Run test suite** to ensure all tests pass
7. **Verify coverage** meets requirements

### ❌ Incorrect Process
1. **Modify Go code** without updating tests
2. **Skip test updates** for "minor" changes
3. **Ignore broken tests** after code changes
4. **Keep tests with undefined function calls**
5. **Defer test updates** to later

## 🎯 Action Items for Cursor

### When Code Changes
1. **Automatically identify** tests that need updates
2. **Remove broken tests** that reference undefined/removed functions
3. **Update existing tests** to reflect code changes
4. **Add new tests** for new functionality
5. **Run test suite** to verify all tests pass
6. **Check coverage** meets requirements

### Test Generation
- **Create test templates** for common patterns
- **Generate test cases** for new functions
- **Add edge case tests** for error conditions
- **Create integration tests** for new components

### Quality Assurance
- **Run tests automatically** after code changes
- **Validate coverage** meets minimum requirements
- **Check for race conditions** with -race flag
- **Ensure tests are deterministic** and repeatable
