---
alwaysApply: true
---

# Go Code Linting Rule

This rule ensures that Go code is automatically linted using the project's Makefile script whenever Go files are modified.

## Automatic Linting Behavior

- **When**: After any modification to `.go` files
- **Command**: `make lint` (uses golangci-lint with project configuration)
- **Scope**: Only modified Go files (faster execution)
- **Output**: Linting errors and warnings are displayed
- **Fallback**: If not in a git repository, lints all Go files

## Linting Configuration

The project uses `golangci-lint` with the following setup:
- Version: v1.59.1
- Auto-installation if not present
- Runs on all Go packages (`./...`)
- Uses project-specific configuration

## Integration with Development Workflow

1. **Automatic Execution**: Linting runs automatically after Go code modifications
2. **Error Reporting**: Linting errors are displayed in the IDE
3. **Consistent Standards**: Ensures all team members follow the same linting rules
4. **Pre-commit Quality**: Catches issues before they reach version control

## Smart Linting Behavior

The linting system now uses intelligent file detection:

1. **Git Repository**: Automatically detects modified Go files using `git diff --name-only --diff-filter=AM HEAD`
2. **Modified Files Only**: Only lints files that have been added or modified since the last commit
3. **No Modified Files**: If no Go files are modified, linting is skipped with a message
4. **Non-Git Environment**: Falls back to linting all Go files if not in a git repository

## Manual Linting Commands

If you need to run linting manually:
```bash
# Run linting on modified Go files only (fast)
make lint

# Run linting on all Go files (slower)
golangci-lint run ./...

# Run linting with verbose output
golangci-lint run -v ./...

# Run linting on specific package
golangci-lint run ./internal/adapter/...
```

## Linting Rules Applied

The project uses golangci-lint with a comprehensive set of linters including:
- `gofmt` - Code formatting
- `govet` - Go vet analysis
- `golint` - Style and convention checking
- `ineffassign` - Ineffective assignments
- `misspell` - Spelling mistakes
- `unused` - Unused code detection
- And many more...

## Error Handling

- Linting errors are displayed in the IDE
- Non-critical warnings are shown but don't block development
- Critical errors should be addressed before committing code
- The linting process is non-blocking and runs in the background

## Performance Considerations

- **Smart File Detection**: Only lints modified Go files using `git diff` for maximum efficiency
- **Git Integration**: Automatically detects modified files since last commit
- **Fallback Mode**: If not in a git repository, falls back to linting all Go files
- **Fast Execution**: Significantly faster than linting entire codebase
- Uses project's optimized Makefile configuration
- Parallel execution where possible
- Caching enabled for faster subsequent runs
