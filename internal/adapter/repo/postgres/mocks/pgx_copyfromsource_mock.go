// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockCopyFromSource creates a new instance of MockCopyFromSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCopyFromSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCopyFromSource {
	mock := &MockCopyFromSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCopyFromSource is an autogenerated mock type for the CopyFromSource type
type MockCopyFromSource struct {
	mock.Mock
}

type MockCopyFromSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCopyFromSource) EXPECT() *MockCopyFromSource_Expecter {
	return &MockCopyFromSource_Expecter{mock: &_m.Mock}
}

// Err provides a mock function for the type MockCopyFromSource
func (_mock *MockCopyFromSource) Err() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCopyFromSource_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type MockCopyFromSource_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *MockCopyFromSource_Expecter) Err() *MockCopyFromSource_Err_Call {
	return &MockCopyFromSource_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *MockCopyFromSource_Err_Call) Run(run func()) *MockCopyFromSource_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCopyFromSource_Err_Call) Return(err error) *MockCopyFromSource_Err_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCopyFromSource_Err_Call) RunAndReturn(run func() error) *MockCopyFromSource_Err_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function for the type MockCopyFromSource
func (_mock *MockCopyFromSource) Next() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockCopyFromSource_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockCopyFromSource_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *MockCopyFromSource_Expecter) Next() *MockCopyFromSource_Next_Call {
	return &MockCopyFromSource_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *MockCopyFromSource_Next_Call) Run(run func()) *MockCopyFromSource_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCopyFromSource_Next_Call) Return(b bool) *MockCopyFromSource_Next_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockCopyFromSource_Next_Call) RunAndReturn(run func() bool) *MockCopyFromSource_Next_Call {
	_c.Call.Return(run)
	return _c
}

// Values provides a mock function for the type MockCopyFromSource
func (_mock *MockCopyFromSource) Values() ([]any, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Values")
	}

	var r0 []any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]any, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCopyFromSource_Values_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Values'
type MockCopyFromSource_Values_Call struct {
	*mock.Call
}

// Values is a helper method to define mock.On call
func (_e *MockCopyFromSource_Expecter) Values() *MockCopyFromSource_Values_Call {
	return &MockCopyFromSource_Values_Call{Call: _e.mock.On("Values")}
}

func (_c *MockCopyFromSource_Values_Call) Run(run func()) *MockCopyFromSource_Values_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCopyFromSource_Values_Call) Return(vs []any, err error) *MockCopyFromSource_Values_Call {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *MockCopyFromSource_Values_Call) RunAndReturn(run func() ([]any, error)) *MockCopyFromSource_Values_Call {
	_c.Call.Return(run)
	return _c
}
