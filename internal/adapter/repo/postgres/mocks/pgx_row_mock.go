// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockRow creates a new instance of MockRow. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRow(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRow {
	mock := &MockRow{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRow is an autogenerated mock type for the Row type
type MockRow struct {
	mock.Mock
}

type MockRow_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRow) EXPECT() *MockRow_Expecter {
	return &MockRow_Expecter{mock: &_m.Mock}
}

// Scan provides a mock function for the type MockRow
func (_mock *MockRow) Scan(dest ...any) error {
	var tmpRet mock.Arguments
	if len(dest) > 0 {
		tmpRet = _mock.Called(dest)
	} else {
		tmpRet = _mock.Called()
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(...any) error); ok {
		r0 = returnFunc(dest...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRow_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type MockRow_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
//   - dest ...any
func (_e *MockRow_Expecter) Scan(dest ...interface{}) *MockRow_Scan_Call {
	return &MockRow_Scan_Call{Call: _e.mock.On("Scan",
		append([]interface{}{}, dest...)...)}
}

func (_c *MockRow_Scan_Call) Run(run func(dest ...any)) *MockRow_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []any
		var variadicArgs []any
		if len(args) > 0 {
			variadicArgs = args[0].([]any)
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *MockRow_Scan_Call) Return(err error) *MockRow_Scan_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRow_Scan_Call) RunAndReturn(run func(dest ...any) error) *MockRow_Scan_Call {
	_c.Call.Return(run)
	return _c
}
