// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/jackc/pgx/v5"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPrepareTracer creates a new instance of MockPrepareTracer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPrepareTracer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPrepareTracer {
	mock := &MockPrepareTracer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPrepareTracer is an autogenerated mock type for the PrepareTracer type
type MockPrepareTracer struct {
	mock.Mock
}

type MockPrepareTracer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPrepareTracer) EXPECT() *MockPrepareTracer_Expecter {
	return &MockPrepareTracer_Expecter{mock: &_m.Mock}
}

// TracePrepareEnd provides a mock function for the type MockPrepareTracer
func (_mock *MockPrepareTracer) TracePrepareEnd(ctx context.Context, conn *pgx.Conn, data pgx.TracePrepareEndData) {
	_mock.Called(ctx, conn, data)
	return
}

// MockPrepareTracer_TracePrepareEnd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TracePrepareEnd'
type MockPrepareTracer_TracePrepareEnd_Call struct {
	*mock.Call
}

// TracePrepareEnd is a helper method to define mock.On call
//   - ctx context.Context
//   - conn *pgx.Conn
//   - data pgx.TracePrepareEndData
func (_e *MockPrepareTracer_Expecter) TracePrepareEnd(ctx interface{}, conn interface{}, data interface{}) *MockPrepareTracer_TracePrepareEnd_Call {
	return &MockPrepareTracer_TracePrepareEnd_Call{Call: _e.mock.On("TracePrepareEnd", ctx, conn, data)}
}

func (_c *MockPrepareTracer_TracePrepareEnd_Call) Run(run func(ctx context.Context, conn *pgx.Conn, data pgx.TracePrepareEndData)) *MockPrepareTracer_TracePrepareEnd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pgx.Conn
		if args[1] != nil {
			arg1 = args[1].(*pgx.Conn)
		}
		var arg2 pgx.TracePrepareEndData
		if args[2] != nil {
			arg2 = args[2].(pgx.TracePrepareEndData)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPrepareTracer_TracePrepareEnd_Call) Return() *MockPrepareTracer_TracePrepareEnd_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPrepareTracer_TracePrepareEnd_Call) RunAndReturn(run func(ctx context.Context, conn *pgx.Conn, data pgx.TracePrepareEndData)) *MockPrepareTracer_TracePrepareEnd_Call {
	_c.Run(run)
	return _c
}

// TracePrepareStart provides a mock function for the type MockPrepareTracer
func (_mock *MockPrepareTracer) TracePrepareStart(ctx context.Context, conn *pgx.Conn, data pgx.TracePrepareStartData) context.Context {
	ret := _mock.Called(ctx, conn, data)

	if len(ret) == 0 {
		panic("no return value specified for TracePrepareStart")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pgx.Conn, pgx.TracePrepareStartData) context.Context); ok {
		r0 = returnFunc(ctx, conn, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// MockPrepareTracer_TracePrepareStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TracePrepareStart'
type MockPrepareTracer_TracePrepareStart_Call struct {
	*mock.Call
}

// TracePrepareStart is a helper method to define mock.On call
//   - ctx context.Context
//   - conn *pgx.Conn
//   - data pgx.TracePrepareStartData
func (_e *MockPrepareTracer_Expecter) TracePrepareStart(ctx interface{}, conn interface{}, data interface{}) *MockPrepareTracer_TracePrepareStart_Call {
	return &MockPrepareTracer_TracePrepareStart_Call{Call: _e.mock.On("TracePrepareStart", ctx, conn, data)}
}

func (_c *MockPrepareTracer_TracePrepareStart_Call) Run(run func(ctx context.Context, conn *pgx.Conn, data pgx.TracePrepareStartData)) *MockPrepareTracer_TracePrepareStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pgx.Conn
		if args[1] != nil {
			arg1 = args[1].(*pgx.Conn)
		}
		var arg2 pgx.TracePrepareStartData
		if args[2] != nil {
			arg2 = args[2].(pgx.TracePrepareStartData)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPrepareTracer_TracePrepareStart_Call) Return(context1 context.Context) *MockPrepareTracer_TracePrepareStart_Call {
	_c.Call.Return(context1)
	return _c
}

func (_c *MockPrepareTracer_TracePrepareStart_Call) RunAndReturn(run func(ctx context.Context, conn *pgx.Conn, data pgx.TracePrepareStartData) context.Context) *MockPrepareTracer_TracePrepareStart_Call {
	_c.Call.Return(run)
	return _c
}
