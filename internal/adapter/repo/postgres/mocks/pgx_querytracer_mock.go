// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/jackc/pgx/v5"
	mock "github.com/stretchr/testify/mock"
)

// NewMockQueryTracer creates a new instance of MockQueryTracer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueryTracer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueryTracer {
	mock := &MockQueryTracer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQueryTracer is an autogenerated mock type for the QueryTracer type
type MockQueryTracer struct {
	mock.Mock
}

type MockQueryTracer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueryTracer) EXPECT() *MockQueryTracer_Expecter {
	return &MockQueryTracer_Expecter{mock: &_m.Mock}
}

// TraceQueryEnd provides a mock function for the type MockQueryTracer
func (_mock *MockQueryTracer) TraceQueryEnd(ctx context.Context, conn *pgx.Conn, data pgx.TraceQueryEndData) {
	_mock.Called(ctx, conn, data)
	return
}

// MockQueryTracer_TraceQueryEnd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TraceQueryEnd'
type MockQueryTracer_TraceQueryEnd_Call struct {
	*mock.Call
}

// TraceQueryEnd is a helper method to define mock.On call
//   - ctx context.Context
//   - conn *pgx.Conn
//   - data pgx.TraceQueryEndData
func (_e *MockQueryTracer_Expecter) TraceQueryEnd(ctx interface{}, conn interface{}, data interface{}) *MockQueryTracer_TraceQueryEnd_Call {
	return &MockQueryTracer_TraceQueryEnd_Call{Call: _e.mock.On("TraceQueryEnd", ctx, conn, data)}
}

func (_c *MockQueryTracer_TraceQueryEnd_Call) Run(run func(ctx context.Context, conn *pgx.Conn, data pgx.TraceQueryEndData)) *MockQueryTracer_TraceQueryEnd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pgx.Conn
		if args[1] != nil {
			arg1 = args[1].(*pgx.Conn)
		}
		var arg2 pgx.TraceQueryEndData
		if args[2] != nil {
			arg2 = args[2].(pgx.TraceQueryEndData)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockQueryTracer_TraceQueryEnd_Call) Return() *MockQueryTracer_TraceQueryEnd_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockQueryTracer_TraceQueryEnd_Call) RunAndReturn(run func(ctx context.Context, conn *pgx.Conn, data pgx.TraceQueryEndData)) *MockQueryTracer_TraceQueryEnd_Call {
	_c.Run(run)
	return _c
}

// TraceQueryStart provides a mock function for the type MockQueryTracer
func (_mock *MockQueryTracer) TraceQueryStart(ctx context.Context, conn *pgx.Conn, data pgx.TraceQueryStartData) context.Context {
	ret := _mock.Called(ctx, conn, data)

	if len(ret) == 0 {
		panic("no return value specified for TraceQueryStart")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pgx.Conn, pgx.TraceQueryStartData) context.Context); ok {
		r0 = returnFunc(ctx, conn, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// MockQueryTracer_TraceQueryStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TraceQueryStart'
type MockQueryTracer_TraceQueryStart_Call struct {
	*mock.Call
}

// TraceQueryStart is a helper method to define mock.On call
//   - ctx context.Context
//   - conn *pgx.Conn
//   - data pgx.TraceQueryStartData
func (_e *MockQueryTracer_Expecter) TraceQueryStart(ctx interface{}, conn interface{}, data interface{}) *MockQueryTracer_TraceQueryStart_Call {
	return &MockQueryTracer_TraceQueryStart_Call{Call: _e.mock.On("TraceQueryStart", ctx, conn, data)}
}

func (_c *MockQueryTracer_TraceQueryStart_Call) Run(run func(ctx context.Context, conn *pgx.Conn, data pgx.TraceQueryStartData)) *MockQueryTracer_TraceQueryStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pgx.Conn
		if args[1] != nil {
			arg1 = args[1].(*pgx.Conn)
		}
		var arg2 pgx.TraceQueryStartData
		if args[2] != nil {
			arg2 = args[2].(pgx.TraceQueryStartData)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockQueryTracer_TraceQueryStart_Call) Return(context1 context.Context) *MockQueryTracer_TraceQueryStart_Call {
	_c.Call.Return(context1)
	return _c
}

func (_c *MockQueryTracer_TraceQueryStart_Call) RunAndReturn(run func(ctx context.Context, conn *pgx.Conn, data pgx.TraceQueryStartData) context.Context) *MockQueryTracer_TraceQueryStart_Call {
	_c.Call.Return(run)
	return _c
}
