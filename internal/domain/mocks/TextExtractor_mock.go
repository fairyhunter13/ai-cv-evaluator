// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/fairyhunter13/ai-cv-evaluator/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTextExtractor creates a new instance of MockTextExtractor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTextExtractor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTextExtractor {
	mock := &MockTextExtractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTextExtractor is an autogenerated mock type for the TextExtractor type
type MockTextExtractor struct {
	mock.Mock
}

type MockTextExtractor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTextExtractor) EXPECT() *MockTextExtractor_Expecter {
	return &MockTextExtractor_Expecter{mock: &_m.Mock}
}

// ExtractPath provides a mock function for the type MockTextExtractor
func (_mock *MockTextExtractor) ExtractPath(ctx domain.Context, fileName string, path string) (string, error) {
	ret := _mock.Called(ctx, fileName, path)

	if len(ret) == 0 {
		panic("no return value specified for ExtractPath")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.Context, string, string) (string, error)); ok {
		return returnFunc(ctx, fileName, path)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.Context, string, string) string); ok {
		r0 = returnFunc(ctx, fileName, path)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.Context, string, string) error); ok {
		r1 = returnFunc(ctx, fileName, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTextExtractor_ExtractPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractPath'
type MockTextExtractor_ExtractPath_Call struct {
	*mock.Call
}

// ExtractPath is a helper method to define mock.On call
//   - ctx domain.Context
//   - fileName string
//   - path string
func (_e *MockTextExtractor_Expecter) ExtractPath(ctx interface{}, fileName interface{}, path interface{}) *MockTextExtractor_ExtractPath_Call {
	return &MockTextExtractor_ExtractPath_Call{Call: _e.mock.On("ExtractPath", ctx, fileName, path)}
}

func (_c *MockTextExtractor_ExtractPath_Call) Run(run func(ctx domain.Context, fileName string, path string)) *MockTextExtractor_ExtractPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Context
		if args[0] != nil {
			arg0 = args[0].(domain.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTextExtractor_ExtractPath_Call) Return(s string, err error) *MockTextExtractor_ExtractPath_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockTextExtractor_ExtractPath_Call) RunAndReturn(run func(ctx domain.Context, fileName string, path string) (string, error)) *MockTextExtractor_ExtractPath_Call {
	_c.Call.Return(run)
	return _c
}
