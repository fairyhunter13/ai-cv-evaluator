// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/fairyhunter13/ai-cv-evaluator/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAIClient creates a new instance of MockAIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAIClient {
	mock := &MockAIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAIClient is an autogenerated mock type for the AIClient type
type MockAIClient struct {
	mock.Mock
}

type MockAIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAIClient) EXPECT() *MockAIClient_Expecter {
	return &MockAIClient_Expecter{mock: &_m.Mock}
}

// ChatJSON provides a mock function for the type MockAIClient
func (_mock *MockAIClient) ChatJSON(ctx domain.Context, systemPrompt string, userPrompt string, maxTokens int) (string, error) {
	ret := _mock.Called(ctx, systemPrompt, userPrompt, maxTokens)

	if len(ret) == 0 {
		panic("no return value specified for ChatJSON")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.Context, string, string, int) (string, error)); ok {
		return returnFunc(ctx, systemPrompt, userPrompt, maxTokens)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.Context, string, string, int) string); ok {
		r0 = returnFunc(ctx, systemPrompt, userPrompt, maxTokens)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.Context, string, string, int) error); ok {
		r1 = returnFunc(ctx, systemPrompt, userPrompt, maxTokens)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAIClient_ChatJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChatJSON'
type MockAIClient_ChatJSON_Call struct {
	*mock.Call
}

// ChatJSON is a helper method to define mock.On call
//   - ctx domain.Context
//   - systemPrompt string
//   - userPrompt string
//   - maxTokens int
func (_e *MockAIClient_Expecter) ChatJSON(ctx interface{}, systemPrompt interface{}, userPrompt interface{}, maxTokens interface{}) *MockAIClient_ChatJSON_Call {
	return &MockAIClient_ChatJSON_Call{Call: _e.mock.On("ChatJSON", ctx, systemPrompt, userPrompt, maxTokens)}
}

func (_c *MockAIClient_ChatJSON_Call) Run(run func(ctx domain.Context, systemPrompt string, userPrompt string, maxTokens int)) *MockAIClient_ChatJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Context
		if args[0] != nil {
			arg0 = args[0].(domain.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockAIClient_ChatJSON_Call) Return(s string, err error) *MockAIClient_ChatJSON_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockAIClient_ChatJSON_Call) RunAndReturn(run func(ctx domain.Context, systemPrompt string, userPrompt string, maxTokens int) (string, error)) *MockAIClient_ChatJSON_Call {
	_c.Call.Return(run)
	return _c
}

// ChatJSONWithRetry provides a mock function for the type MockAIClient
func (_mock *MockAIClient) ChatJSONWithRetry(ctx domain.Context, systemPrompt string, userPrompt string, maxTokens int) (string, error) {
	ret := _mock.Called(ctx, systemPrompt, userPrompt, maxTokens)

	if len(ret) == 0 {
		panic("no return value specified for ChatJSONWithRetry")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.Context, string, string, int) (string, error)); ok {
		return returnFunc(ctx, systemPrompt, userPrompt, maxTokens)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.Context, string, string, int) string); ok {
		r0 = returnFunc(ctx, systemPrompt, userPrompt, maxTokens)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.Context, string, string, int) error); ok {
		r1 = returnFunc(ctx, systemPrompt, userPrompt, maxTokens)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAIClient_ChatJSONWithRetry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChatJSONWithRetry'
type MockAIClient_ChatJSONWithRetry_Call struct {
	*mock.Call
}

// ChatJSONWithRetry is a helper method to define mock.On call
//   - ctx domain.Context
//   - systemPrompt string
//   - userPrompt string
//   - maxTokens int
func (_e *MockAIClient_Expecter) ChatJSONWithRetry(ctx interface{}, systemPrompt interface{}, userPrompt interface{}, maxTokens interface{}) *MockAIClient_ChatJSONWithRetry_Call {
	return &MockAIClient_ChatJSONWithRetry_Call{Call: _e.mock.On("ChatJSONWithRetry", ctx, systemPrompt, userPrompt, maxTokens)}
}

func (_c *MockAIClient_ChatJSONWithRetry_Call) Run(run func(ctx domain.Context, systemPrompt string, userPrompt string, maxTokens int)) *MockAIClient_ChatJSONWithRetry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Context
		if args[0] != nil {
			arg0 = args[0].(domain.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockAIClient_ChatJSONWithRetry_Call) Return(s string, err error) *MockAIClient_ChatJSONWithRetry_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockAIClient_ChatJSONWithRetry_Call) RunAndReturn(run func(ctx domain.Context, systemPrompt string, userPrompt string, maxTokens int) (string, error)) *MockAIClient_ChatJSONWithRetry_Call {
	_c.Call.Return(run)
	return _c
}

// CleanCoTResponse provides a mock function for the type MockAIClient
func (_mock *MockAIClient) CleanCoTResponse(ctx domain.Context, response string) (string, error) {
	ret := _mock.Called(ctx, response)

	if len(ret) == 0 {
		panic("no return value specified for CleanCoTResponse")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.Context, string) (string, error)); ok {
		return returnFunc(ctx, response)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.Context, string) string); ok {
		r0 = returnFunc(ctx, response)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.Context, string) error); ok {
		r1 = returnFunc(ctx, response)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAIClient_CleanCoTResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanCoTResponse'
type MockAIClient_CleanCoTResponse_Call struct {
	*mock.Call
}

// CleanCoTResponse is a helper method to define mock.On call
//   - ctx domain.Context
//   - response string
func (_e *MockAIClient_Expecter) CleanCoTResponse(ctx interface{}, response interface{}) *MockAIClient_CleanCoTResponse_Call {
	return &MockAIClient_CleanCoTResponse_Call{Call: _e.mock.On("CleanCoTResponse", ctx, response)}
}

func (_c *MockAIClient_CleanCoTResponse_Call) Run(run func(ctx domain.Context, response string)) *MockAIClient_CleanCoTResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Context
		if args[0] != nil {
			arg0 = args[0].(domain.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAIClient_CleanCoTResponse_Call) Return(s string, err error) *MockAIClient_CleanCoTResponse_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockAIClient_CleanCoTResponse_Call) RunAndReturn(run func(ctx domain.Context, response string) (string, error)) *MockAIClient_CleanCoTResponse_Call {
	_c.Call.Return(run)
	return _c
}

// Embed provides a mock function for the type MockAIClient
func (_mock *MockAIClient) Embed(ctx domain.Context, texts []string) ([][]float32, error) {
	ret := _mock.Called(ctx, texts)

	if len(ret) == 0 {
		panic("no return value specified for Embed")
	}

	var r0 [][]float32
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.Context, []string) ([][]float32, error)); ok {
		return returnFunc(ctx, texts)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.Context, []string) [][]float32); ok {
		r0 = returnFunc(ctx, texts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]float32)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(domain.Context, []string) error); ok {
		r1 = returnFunc(ctx, texts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAIClient_Embed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Embed'
type MockAIClient_Embed_Call struct {
	*mock.Call
}

// Embed is a helper method to define mock.On call
//   - ctx domain.Context
//   - texts []string
func (_e *MockAIClient_Expecter) Embed(ctx interface{}, texts interface{}) *MockAIClient_Embed_Call {
	return &MockAIClient_Embed_Call{Call: _e.mock.On("Embed", ctx, texts)}
}

func (_c *MockAIClient_Embed_Call) Run(run func(ctx domain.Context, texts []string)) *MockAIClient_Embed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Context
		if args[0] != nil {
			arg0 = args[0].(domain.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAIClient_Embed_Call) Return(float32ss [][]float32, err error) *MockAIClient_Embed_Call {
	_c.Call.Return(float32ss, err)
	return _c
}

func (_c *MockAIClient_Embed_Call) RunAndReturn(run func(ctx domain.Context, texts []string) ([][]float32, error)) *MockAIClient_Embed_Call {
	_c.Call.Return(run)
	return _c
}
