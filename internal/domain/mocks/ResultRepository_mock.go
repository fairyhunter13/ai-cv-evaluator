// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/fairyhunter13/ai-cv-evaluator/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockResultRepository creates a new instance of MockResultRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResultRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResultRepository {
	mock := &MockResultRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockResultRepository is an autogenerated mock type for the ResultRepository type
type MockResultRepository struct {
	mock.Mock
}

type MockResultRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResultRepository) EXPECT() *MockResultRepository_Expecter {
	return &MockResultRepository_Expecter{mock: &_m.Mock}
}

// GetByJobID provides a mock function for the type MockResultRepository
func (_mock *MockResultRepository) GetByJobID(ctx domain.Context, jobID string) (domain.Result, error) {
	ret := _mock.Called(ctx, jobID)

	if len(ret) == 0 {
		panic("no return value specified for GetByJobID")
	}

	var r0 domain.Result
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.Context, string) (domain.Result, error)); ok {
		return returnFunc(ctx, jobID)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.Context, string) domain.Result); ok {
		r0 = returnFunc(ctx, jobID)
	} else {
		r0 = ret.Get(0).(domain.Result)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.Context, string) error); ok {
		r1 = returnFunc(ctx, jobID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockResultRepository_GetByJobID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByJobID'
type MockResultRepository_GetByJobID_Call struct {
	*mock.Call
}

// GetByJobID is a helper method to define mock.On call
//   - ctx domain.Context
//   - jobID string
func (_e *MockResultRepository_Expecter) GetByJobID(ctx interface{}, jobID interface{}) *MockResultRepository_GetByJobID_Call {
	return &MockResultRepository_GetByJobID_Call{Call: _e.mock.On("GetByJobID", ctx, jobID)}
}

func (_c *MockResultRepository_GetByJobID_Call) Run(run func(ctx domain.Context, jobID string)) *MockResultRepository_GetByJobID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Context
		if args[0] != nil {
			arg0 = args[0].(domain.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockResultRepository_GetByJobID_Call) Return(result domain.Result, err error) *MockResultRepository_GetByJobID_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockResultRepository_GetByJobID_Call) RunAndReturn(run func(ctx domain.Context, jobID string) (domain.Result, error)) *MockResultRepository_GetByJobID_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function for the type MockResultRepository
func (_mock *MockResultRepository) Upsert(ctx domain.Context, r domain.Result) error {
	ret := _mock.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(domain.Context, domain.Result) error); ok {
		r0 = returnFunc(ctx, r)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockResultRepository_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type MockResultRepository_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - ctx domain.Context
//   - r domain.Result
func (_e *MockResultRepository_Expecter) Upsert(ctx interface{}, r interface{}) *MockResultRepository_Upsert_Call {
	return &MockResultRepository_Upsert_Call{Call: _e.mock.On("Upsert", ctx, r)}
}

func (_c *MockResultRepository_Upsert_Call) Run(run func(ctx domain.Context, r domain.Result)) *MockResultRepository_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Context
		if args[0] != nil {
			arg0 = args[0].(domain.Context)
		}
		var arg1 domain.Result
		if args[1] != nil {
			arg1 = args[1].(domain.Result)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockResultRepository_Upsert_Call) Return(err error) *MockResultRepository_Upsert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockResultRepository_Upsert_Call) RunAndReturn(run func(ctx domain.Context, r domain.Result) error) *MockResultRepository_Upsert_Call {
	_c.Call.Return(run)
	return _c
}
