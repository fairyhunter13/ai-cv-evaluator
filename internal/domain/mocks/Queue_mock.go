// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/fairyhunter13/ai-cv-evaluator/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewQueue creates a new instance of Queue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *Queue {
	mock := &Queue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Queue is an autogenerated mock type for the Queue type
type Queue struct {
	mock.Mock
}

type Queue_Expecter struct {
	mock *mock.Mock
}

func (_m *Queue) EXPECT() *Queue_Expecter {
	return &Queue_Expecter{mock: &_m.Mock}
}

// EnqueueEvaluate provides a mock function for the type Queue
func (_mock *Queue) EnqueueEvaluate(ctx domain.Context, payload domain.EvaluateTaskPayload) (string, error) {
	ret := _mock.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueEvaluate")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.Context, domain.EvaluateTaskPayload) (string, error)); ok {
		return returnFunc(ctx, payload)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.Context, domain.EvaluateTaskPayload) string); ok {
		r0 = returnFunc(ctx, payload)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.Context, domain.EvaluateTaskPayload) error); ok {
		r1 = returnFunc(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Queue_EnqueueEvaluate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueEvaluate'
type Queue_EnqueueEvaluate_Call struct {
	*mock.Call
}

// EnqueueEvaluate is a helper method to define mock.On call
//   - ctx domain.Context
//   - payload domain.EvaluateTaskPayload
func (_e *Queue_Expecter) EnqueueEvaluate(ctx interface{}, payload interface{}) *Queue_EnqueueEvaluate_Call {
	return &Queue_EnqueueEvaluate_Call{Call: _e.mock.On("EnqueueEvaluate", ctx, payload)}
}

func (_c *Queue_EnqueueEvaluate_Call) Run(run func(ctx domain.Context, payload domain.EvaluateTaskPayload)) *Queue_EnqueueEvaluate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Context
		if args[0] != nil {
			arg0 = args[0].(domain.Context)
		}
		var arg1 domain.EvaluateTaskPayload
		if args[1] != nil {
			arg1 = args[1].(domain.EvaluateTaskPayload)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Queue_EnqueueEvaluate_Call) Return(s string, err error) *Queue_EnqueueEvaluate_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *Queue_EnqueueEvaluate_Call) RunAndReturn(run func(ctx domain.Context, payload domain.EvaluateTaskPayload) (string, error)) *Queue_EnqueueEvaluate_Call {
	_c.Call.Return(run)
	return _c
}
