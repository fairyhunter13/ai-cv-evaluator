// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/fairyhunter13/ai-cv-evaluator/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockJobRepository creates a new instance of MockJobRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJobRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJobRepository {
	mock := &MockJobRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJobRepository is an autogenerated mock type for the JobRepository type
type MockJobRepository struct {
	mock.Mock
}

type MockJobRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJobRepository) EXPECT() *MockJobRepository_Expecter {
	return &MockJobRepository_Expecter{mock: &_m.Mock}
}

// Count provides a mock function for the type MockJobRepository
func (_mock *MockJobRepository) Count(ctx domain.Context) (int64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.Context) (int64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobRepository_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockJobRepository_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx domain.Context
func (_e *MockJobRepository_Expecter) Count(ctx interface{}) *MockJobRepository_Count_Call {
	return &MockJobRepository_Count_Call{Call: _e.mock.On("Count", ctx)}
}

func (_c *MockJobRepository_Count_Call) Run(run func(ctx domain.Context)) *MockJobRepository_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Context
		if args[0] != nil {
			arg0 = args[0].(domain.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockJobRepository_Count_Call) Return(n int64, err error) *MockJobRepository_Count_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockJobRepository_Count_Call) RunAndReturn(run func(ctx domain.Context) (int64, error)) *MockJobRepository_Count_Call {
	_c.Call.Return(run)
	return _c
}

// CountByStatus provides a mock function for the type MockJobRepository
func (_mock *MockJobRepository) CountByStatus(ctx domain.Context, status domain.JobStatus) (int64, error) {
	ret := _mock.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for CountByStatus")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.Context, domain.JobStatus) (int64, error)); ok {
		return returnFunc(ctx, status)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.Context, domain.JobStatus) int64); ok {
		r0 = returnFunc(ctx, status)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.Context, domain.JobStatus) error); ok {
		r1 = returnFunc(ctx, status)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobRepository_CountByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountByStatus'
type MockJobRepository_CountByStatus_Call struct {
	*mock.Call
}

// CountByStatus is a helper method to define mock.On call
//   - ctx domain.Context
//   - status domain.JobStatus
func (_e *MockJobRepository_Expecter) CountByStatus(ctx interface{}, status interface{}) *MockJobRepository_CountByStatus_Call {
	return &MockJobRepository_CountByStatus_Call{Call: _e.mock.On("CountByStatus", ctx, status)}
}

func (_c *MockJobRepository_CountByStatus_Call) Run(run func(ctx domain.Context, status domain.JobStatus)) *MockJobRepository_CountByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Context
		if args[0] != nil {
			arg0 = args[0].(domain.Context)
		}
		var arg1 domain.JobStatus
		if args[1] != nil {
			arg1 = args[1].(domain.JobStatus)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockJobRepository_CountByStatus_Call) Return(n int64, err error) *MockJobRepository_CountByStatus_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockJobRepository_CountByStatus_Call) RunAndReturn(run func(ctx domain.Context, status domain.JobStatus) (int64, error)) *MockJobRepository_CountByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CountWithFilters provides a mock function for the type MockJobRepository
func (_mock *MockJobRepository) CountWithFilters(ctx domain.Context, search string, status string) (int64, error) {
	ret := _mock.Called(ctx, search, status)

	if len(ret) == 0 {
		panic("no return value specified for CountWithFilters")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.Context, string, string) (int64, error)); ok {
		return returnFunc(ctx, search, status)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.Context, string, string) int64); ok {
		r0 = returnFunc(ctx, search, status)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.Context, string, string) error); ok {
		r1 = returnFunc(ctx, search, status)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobRepository_CountWithFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountWithFilters'
type MockJobRepository_CountWithFilters_Call struct {
	*mock.Call
}

// CountWithFilters is a helper method to define mock.On call
//   - ctx domain.Context
//   - search string
//   - status string
func (_e *MockJobRepository_Expecter) CountWithFilters(ctx interface{}, search interface{}, status interface{}) *MockJobRepository_CountWithFilters_Call {
	return &MockJobRepository_CountWithFilters_Call{Call: _e.mock.On("CountWithFilters", ctx, search, status)}
}

func (_c *MockJobRepository_CountWithFilters_Call) Run(run func(ctx domain.Context, search string, status string)) *MockJobRepository_CountWithFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Context
		if args[0] != nil {
			arg0 = args[0].(domain.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJobRepository_CountWithFilters_Call) Return(n int64, err error) *MockJobRepository_CountWithFilters_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockJobRepository_CountWithFilters_Call) RunAndReturn(run func(ctx domain.Context, search string, status string) (int64, error)) *MockJobRepository_CountWithFilters_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockJobRepository
func (_mock *MockJobRepository) Create(ctx domain.Context, j domain.Job) (string, error) {
	ret := _mock.Called(ctx, j)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.Context, domain.Job) (string, error)); ok {
		return returnFunc(ctx, j)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.Context, domain.Job) string); ok {
		r0 = returnFunc(ctx, j)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.Context, domain.Job) error); ok {
		r1 = returnFunc(ctx, j)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockJobRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx domain.Context
//   - j domain.Job
func (_e *MockJobRepository_Expecter) Create(ctx interface{}, j interface{}) *MockJobRepository_Create_Call {
	return &MockJobRepository_Create_Call{Call: _e.mock.On("Create", ctx, j)}
}

func (_c *MockJobRepository_Create_Call) Run(run func(ctx domain.Context, j domain.Job)) *MockJobRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Context
		if args[0] != nil {
			arg0 = args[0].(domain.Context)
		}
		var arg1 domain.Job
		if args[1] != nil {
			arg1 = args[1].(domain.Job)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockJobRepository_Create_Call) Return(s string, err error) *MockJobRepository_Create_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockJobRepository_Create_Call) RunAndReturn(run func(ctx domain.Context, j domain.Job) (string, error)) *MockJobRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindByIdempotencyKey provides a mock function for the type MockJobRepository
func (_mock *MockJobRepository) FindByIdempotencyKey(ctx domain.Context, key string) (domain.Job, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for FindByIdempotencyKey")
	}

	var r0 domain.Job
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.Context, string) (domain.Job, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.Context, string) domain.Job); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Get(0).(domain.Job)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.Context, string) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobRepository_FindByIdempotencyKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByIdempotencyKey'
type MockJobRepository_FindByIdempotencyKey_Call struct {
	*mock.Call
}

// FindByIdempotencyKey is a helper method to define mock.On call
//   - ctx domain.Context
//   - key string
func (_e *MockJobRepository_Expecter) FindByIdempotencyKey(ctx interface{}, key interface{}) *MockJobRepository_FindByIdempotencyKey_Call {
	return &MockJobRepository_FindByIdempotencyKey_Call{Call: _e.mock.On("FindByIdempotencyKey", ctx, key)}
}

func (_c *MockJobRepository_FindByIdempotencyKey_Call) Run(run func(ctx domain.Context, key string)) *MockJobRepository_FindByIdempotencyKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Context
		if args[0] != nil {
			arg0 = args[0].(domain.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockJobRepository_FindByIdempotencyKey_Call) Return(job domain.Job, err error) *MockJobRepository_FindByIdempotencyKey_Call {
	_c.Call.Return(job, err)
	return _c
}

func (_c *MockJobRepository_FindByIdempotencyKey_Call) RunAndReturn(run func(ctx domain.Context, key string) (domain.Job, error)) *MockJobRepository_FindByIdempotencyKey_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockJobRepository
func (_mock *MockJobRepository) Get(ctx domain.Context, id string) (domain.Job, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 domain.Job
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.Context, string) (domain.Job, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.Context, string) domain.Job); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Job)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockJobRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx domain.Context
//   - id string
func (_e *MockJobRepository_Expecter) Get(ctx interface{}, id interface{}) *MockJobRepository_Get_Call {
	return &MockJobRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockJobRepository_Get_Call) Run(run func(ctx domain.Context, id string)) *MockJobRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Context
		if args[0] != nil {
			arg0 = args[0].(domain.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockJobRepository_Get_Call) Return(job domain.Job, err error) *MockJobRepository_Get_Call {
	_c.Call.Return(job, err)
	return _c
}

func (_c *MockJobRepository_Get_Call) RunAndReturn(run func(ctx domain.Context, id string) (domain.Job, error)) *MockJobRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAverageProcessingTime provides a mock function for the type MockJobRepository
func (_mock *MockJobRepository) GetAverageProcessingTime(ctx domain.Context) (float64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAverageProcessingTime")
	}

	var r0 float64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.Context) (float64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.Context) float64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(float64)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobRepository_GetAverageProcessingTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAverageProcessingTime'
type MockJobRepository_GetAverageProcessingTime_Call struct {
	*mock.Call
}

// GetAverageProcessingTime is a helper method to define mock.On call
//   - ctx domain.Context
func (_e *MockJobRepository_Expecter) GetAverageProcessingTime(ctx interface{}) *MockJobRepository_GetAverageProcessingTime_Call {
	return &MockJobRepository_GetAverageProcessingTime_Call{Call: _e.mock.On("GetAverageProcessingTime", ctx)}
}

func (_c *MockJobRepository_GetAverageProcessingTime_Call) Run(run func(ctx domain.Context)) *MockJobRepository_GetAverageProcessingTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Context
		if args[0] != nil {
			arg0 = args[0].(domain.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockJobRepository_GetAverageProcessingTime_Call) Return(f float64, err error) *MockJobRepository_GetAverageProcessingTime_Call {
	_c.Call.Return(f, err)
	return _c
}

func (_c *MockJobRepository_GetAverageProcessingTime_Call) RunAndReturn(run func(ctx domain.Context) (float64, error)) *MockJobRepository_GetAverageProcessingTime_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockJobRepository
func (_mock *MockJobRepository) List(ctx domain.Context, offset int, limit int) ([]domain.Job, error) {
	ret := _mock.Called(ctx, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.Job
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.Context, int, int) ([]domain.Job, error)); ok {
		return returnFunc(ctx, offset, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.Context, int, int) []domain.Job); ok {
		r0 = returnFunc(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Job)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(domain.Context, int, int) error); ok {
		r1 = returnFunc(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockJobRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx domain.Context
//   - offset int
//   - limit int
func (_e *MockJobRepository_Expecter) List(ctx interface{}, offset interface{}, limit interface{}) *MockJobRepository_List_Call {
	return &MockJobRepository_List_Call{Call: _e.mock.On("List", ctx, offset, limit)}
}

func (_c *MockJobRepository_List_Call) Run(run func(ctx domain.Context, offset int, limit int)) *MockJobRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Context
		if args[0] != nil {
			arg0 = args[0].(domain.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJobRepository_List_Call) Return(jobs []domain.Job, err error) *MockJobRepository_List_Call {
	_c.Call.Return(jobs, err)
	return _c
}

func (_c *MockJobRepository_List_Call) RunAndReturn(run func(ctx domain.Context, offset int, limit int) ([]domain.Job, error)) *MockJobRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListWithFilters provides a mock function for the type MockJobRepository
func (_mock *MockJobRepository) ListWithFilters(ctx domain.Context, offset int, limit int, search string, status string) ([]domain.Job, error) {
	ret := _mock.Called(ctx, offset, limit, search, status)

	if len(ret) == 0 {
		panic("no return value specified for ListWithFilters")
	}

	var r0 []domain.Job
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.Context, int, int, string, string) ([]domain.Job, error)); ok {
		return returnFunc(ctx, offset, limit, search, status)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.Context, int, int, string, string) []domain.Job); ok {
		r0 = returnFunc(ctx, offset, limit, search, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Job)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(domain.Context, int, int, string, string) error); ok {
		r1 = returnFunc(ctx, offset, limit, search, status)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobRepository_ListWithFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWithFilters'
type MockJobRepository_ListWithFilters_Call struct {
	*mock.Call
}

// ListWithFilters is a helper method to define mock.On call
//   - ctx domain.Context
//   - offset int
//   - limit int
//   - search string
//   - status string
func (_e *MockJobRepository_Expecter) ListWithFilters(ctx interface{}, offset interface{}, limit interface{}, search interface{}, status interface{}) *MockJobRepository_ListWithFilters_Call {
	return &MockJobRepository_ListWithFilters_Call{Call: _e.mock.On("ListWithFilters", ctx, offset, limit, search, status)}
}

func (_c *MockJobRepository_ListWithFilters_Call) Run(run func(ctx domain.Context, offset int, limit int, search string, status string)) *MockJobRepository_ListWithFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Context
		if args[0] != nil {
			arg0 = args[0].(domain.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockJobRepository_ListWithFilters_Call) Return(jobs []domain.Job, err error) *MockJobRepository_ListWithFilters_Call {
	_c.Call.Return(jobs, err)
	return _c
}

func (_c *MockJobRepository_ListWithFilters_Call) RunAndReturn(run func(ctx domain.Context, offset int, limit int, search string, status string) ([]domain.Job, error)) *MockJobRepository_ListWithFilters_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function for the type MockJobRepository
func (_mock *MockJobRepository) UpdateStatus(ctx domain.Context, id string, status domain.JobStatus, errMsg *string) error {
	ret := _mock.Called(ctx, id, status, errMsg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(domain.Context, string, domain.JobStatus, *string) error); ok {
		r0 = returnFunc(ctx, id, status, errMsg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockJobRepository_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockJobRepository_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx domain.Context
//   - id string
//   - status domain.JobStatus
//   - errMsg *string
func (_e *MockJobRepository_Expecter) UpdateStatus(ctx interface{}, id interface{}, status interface{}, errMsg interface{}) *MockJobRepository_UpdateStatus_Call {
	return &MockJobRepository_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, id, status, errMsg)}
}

func (_c *MockJobRepository_UpdateStatus_Call) Run(run func(ctx domain.Context, id string, status domain.JobStatus, errMsg *string)) *MockJobRepository_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Context
		if args[0] != nil {
			arg0 = args[0].(domain.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 domain.JobStatus
		if args[2] != nil {
			arg2 = args[2].(domain.JobStatus)
		}
		var arg3 *string
		if args[3] != nil {
			arg3 = args[3].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockJobRepository_UpdateStatus_Call) Return(err error) *MockJobRepository_UpdateStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockJobRepository_UpdateStatus_Call) RunAndReturn(run func(ctx domain.Context, id string, status domain.JobStatus, errMsg *string) error) *MockJobRepository_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}
