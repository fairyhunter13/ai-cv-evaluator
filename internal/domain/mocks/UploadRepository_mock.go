// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/fairyhunter13/ai-cv-evaluator/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewUploadRepository creates a new instance of UploadRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUploadRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UploadRepository {
	mock := &UploadRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UploadRepository is an autogenerated mock type for the UploadRepository type
type UploadRepository struct {
	mock.Mock
}

type UploadRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UploadRepository) EXPECT() *UploadRepository_Expecter {
	return &UploadRepository_Expecter{mock: &_m.Mock}
}

// Count provides a mock function for the type UploadRepository
func (_mock *UploadRepository) Count(ctx domain.Context) (int64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.Context) (int64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UploadRepository_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type UploadRepository_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx domain.Context
func (_e *UploadRepository_Expecter) Count(ctx interface{}) *UploadRepository_Count_Call {
	return &UploadRepository_Count_Call{Call: _e.mock.On("Count", ctx)}
}

func (_c *UploadRepository_Count_Call) Run(run func(ctx domain.Context)) *UploadRepository_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Context
		if args[0] != nil {
			arg0 = args[0].(domain.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UploadRepository_Count_Call) Return(n int64, err error) *UploadRepository_Count_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *UploadRepository_Count_Call) RunAndReturn(run func(ctx domain.Context) (int64, error)) *UploadRepository_Count_Call {
	_c.Call.Return(run)
	return _c
}

// CountByType provides a mock function for the type UploadRepository
func (_mock *UploadRepository) CountByType(ctx domain.Context, uploadType string) (int64, error) {
	ret := _mock.Called(ctx, uploadType)

	if len(ret) == 0 {
		panic("no return value specified for CountByType")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.Context, string) (int64, error)); ok {
		return returnFunc(ctx, uploadType)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.Context, string) int64); ok {
		r0 = returnFunc(ctx, uploadType)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.Context, string) error); ok {
		r1 = returnFunc(ctx, uploadType)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UploadRepository_CountByType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountByType'
type UploadRepository_CountByType_Call struct {
	*mock.Call
}

// CountByType is a helper method to define mock.On call
//   - ctx domain.Context
//   - uploadType string
func (_e *UploadRepository_Expecter) CountByType(ctx interface{}, uploadType interface{}) *UploadRepository_CountByType_Call {
	return &UploadRepository_CountByType_Call{Call: _e.mock.On("CountByType", ctx, uploadType)}
}

func (_c *UploadRepository_CountByType_Call) Run(run func(ctx domain.Context, uploadType string)) *UploadRepository_CountByType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Context
		if args[0] != nil {
			arg0 = args[0].(domain.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UploadRepository_CountByType_Call) Return(n int64, err error) *UploadRepository_CountByType_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *UploadRepository_CountByType_Call) RunAndReturn(run func(ctx domain.Context, uploadType string) (int64, error)) *UploadRepository_CountByType_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type UploadRepository
func (_mock *UploadRepository) Create(ctx domain.Context, u domain.Upload) (string, error) {
	ret := _mock.Called(ctx, u)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.Context, domain.Upload) (string, error)); ok {
		return returnFunc(ctx, u)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.Context, domain.Upload) string); ok {
		r0 = returnFunc(ctx, u)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.Context, domain.Upload) error); ok {
		r1 = returnFunc(ctx, u)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UploadRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UploadRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx domain.Context
//   - u domain.Upload
func (_e *UploadRepository_Expecter) Create(ctx interface{}, u interface{}) *UploadRepository_Create_Call {
	return &UploadRepository_Create_Call{Call: _e.mock.On("Create", ctx, u)}
}

func (_c *UploadRepository_Create_Call) Run(run func(ctx domain.Context, u domain.Upload)) *UploadRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Context
		if args[0] != nil {
			arg0 = args[0].(domain.Context)
		}
		var arg1 domain.Upload
		if args[1] != nil {
			arg1 = args[1].(domain.Upload)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UploadRepository_Create_Call) Return(s string, err error) *UploadRepository_Create_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *UploadRepository_Create_Call) RunAndReturn(run func(ctx domain.Context, u domain.Upload) (string, error)) *UploadRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type UploadRepository
func (_mock *UploadRepository) Get(ctx domain.Context, id string) (domain.Upload, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 domain.Upload
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.Context, string) (domain.Upload, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.Context, string) domain.Upload); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Upload)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UploadRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type UploadRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx domain.Context
//   - id string
func (_e *UploadRepository_Expecter) Get(ctx interface{}, id interface{}) *UploadRepository_Get_Call {
	return &UploadRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *UploadRepository_Get_Call) Run(run func(ctx domain.Context, id string)) *UploadRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Context
		if args[0] != nil {
			arg0 = args[0].(domain.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UploadRepository_Get_Call) Return(upload domain.Upload, err error) *UploadRepository_Get_Call {
	_c.Call.Return(upload, err)
	return _c
}

func (_c *UploadRepository_Get_Call) RunAndReturn(run func(ctx domain.Context, id string) (domain.Upload, error)) *UploadRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}
