name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (production only)'
        required: true
        default: 'production'
        type: choice
        options:
          - production
      force_deploy:
        description: 'Force deployment (skip safety checks)'
        required: false
        default: false
        type: boolean
  push:
    tags:
      - 'v*.*.*'

jobs:
  pre-deploy-checks:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.safety_check.outputs.should_deploy }}
      image_tag: ${{ steps.metadata.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Extract metadata
        id: metadata
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "image_tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "image_tag=latest" >> $GITHUB_OUTPUT
          fi
          echo "commit_sha=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
      
      - name: Safety checks
        id: safety_check
        run: |
          # Check if this is a production deployment
          if [[ "${{ github.event.inputs.environment || 'production' }}" == "production" && "${{ github.event.inputs.force_deploy }}" != "true" ]]; then
            # Ensure we're deploying a tagged version to production
            if [[ "${{ github.ref }}" != refs/tags/* ]]; then
              echo "Error: Production deployments require a git tag"
              exit 1
            fi
            
            # Check if tag follows semantic versioning
            if [[ ! "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Error: Production deployments require semantic version tags (v1.2.3)"
              exit 1
            fi
          fi
          echo "should_deploy=true" >> $GITHUB_OUTPUT
  
  build-and-scan:
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.should_deploy == 'true'
    outputs:
      image_digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ needs.pre-deploy-checks.outputs.image_tag }}
            ghcr.io/${{ github.repository }}:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Security scan of built image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
      
      - name: Generate SBOM (Software Bill of Materials)
        uses: anchore/sbom-action@v0
        with:
          image: 'ghcr.io/${{ github.repository }}:${{ github.sha }}'
          format: spdx-json
          output-file: sbom.spdx.json
      
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.sha }}
          path: sbom.spdx.json
  
  e2e-verify:
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
      - name: Install SOPS and AGE
        run: |
          sudo apt-get update
          sudo apt-get install -y age sops
      - name: Prepare SOPS age key
        if: ${{ secrets.SOPS_AGE_KEY != '' }}
        env:
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}
        run: |
          mkdir -p ~/.config/sops/age
          printf %s "$SOPS_AGE_KEY" > ~/.config/sops/age/keys.txt
          chmod 600 ~/.config/sops/age/keys.txt
      - name: Decrypt env for E2E (.env from secrets/env.sops.yaml)
        if: ${{ secrets.SOPS_AGE_KEY != '' }}
        run: make decrypt-env
      - name: Export .env to job environment
        if: ${{ secrets.SOPS_AGE_KEY != '' }}
        run: |
          while IFS= read -r line; do
            [ -z "$line" ] && continue
            case "$line" in \#*) continue;; esac
            key="${line%%=*}"; val="${line#*=}"; echo "$key=$val" >> $GITHUB_ENV
          done < .env
      - name: Run E2E tests (pre-deploy gate)
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: make ci-e2e

  deploy:
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, build-and-scan, e2e-verify]
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install SOPS and AGE
        run: |
          sudo apt-get update
          sudo apt-get install -y age sops

      - name: Prepare SOPS age key
        env:
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}
        run: |
          mkdir -p ~/.config/sops/age
          printf %s "$SOPS_AGE_KEY" > ~/.config/sops/age/keys.txt
          chmod 600 ~/.config/sops/age/keys.txt

      - name: Set up SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          printf %s "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Add server to known_hosts for security
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          
          # Test connection
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} echo "Connection successful"

      - name: Create deployment directory
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p ~/ai-cv-evaluator/deploy"
      
      - name: Decrypt production .env and upload compose/configs
        run: |
          # Decrypt .env.production via Makefile target (requires SOPS installed above)
          if [ -f secrets/env.production.sops.yaml ]; then
            make decrypt-env-production
          fi
          scp docker-compose.prod.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/ai-cv-evaluator/
          scp -r deploy/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/ai-cv-evaluator/
          if [ -f .env.production ]; then
            scp .env.production ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/ai-cv-evaluator/
          fi
      
      - name: Login to GHCR on server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin"
      
      - name: Pre-deployment health check
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            cd ~/ai-cv-evaluator
            
            # Check if services are running
            if docker compose ps --services --filter "status=running" | grep -q .; then
              echo "Current services health check..."
              docker compose exec -T db pg_isready -U $POSTGRES_USER || echo "Warning: Postgres not ready"
              docker compose exec -T redis redis-cli ping || echo "Warning: Redis not ready"
            fi
          '
      
      - name: Pull new image
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker pull ghcr.io/${{ github.repository }}:${{ github.sha }}"
      
      - name: Run database migrations
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            cd ~/ai-cv-evaluator
            
            # Backup database before migration
            docker compose exec -T db pg_dump -U \$POSTGRES_USER \$POSTGRES_DB > "backup_$(date +%Y%m%d_%H%M%S).sql" || echo "Warning: Backup failed"
            
            # Run migrations with the new image
            docker run --rm --network ai-cv-evaluator_default \
              -e DB_URL="\$DB_URL" \
              ghcr.io/${{ github.repository }}:${{ github.sha }} \
              sh -c "cd /app && make migrate"
          '
      
      - name: Rolling deployment (production compose)
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            cd ~/ai-cv-evaluator
            # Update image tag in prod compose file
            sed -i "s|image: ghcr.io/.*/ai-cv-evaluator:.*|image: ghcr.io/${{ github.repository }}:${{ github.sha }}|g" docker-compose.prod.yml || true
            # Bring up with production compose and env
            export COMPOSE_FILE=docker-compose.prod.yml
            docker compose up -d
            
            # Wait for health check
            echo "Waiting for application to be healthy (via Nginx)..."
            for i in {1..30}; do
              if curl -f http://localhost/healthz > /dev/null 2>&1; then
                echo "Application is healthy"
                break
              fi
              echo "Attempt $i: Waiting for health check..."
              sleep 10
            done
            
            # Final verification
            docker compose -f docker-compose.prod.yml ps
          '

      - name: Setup/renew TLS certificate (Certbot in Docker)
        env:
          LETSENCRYPT_EMAIL: ${{ secrets.LETSENCRYPT_EMAIL }}
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            set -e
            cd ~/ai-cv-evaluator
            if [ -z "'$LETSENCRYPT_EMAIL'" ]; then
              echo "LETSENCRYPT_EMAIL not set; skipping cert issuance";
            else
              docker compose run --rm certbot certonly \
                --webroot -w /var/www/certbot \
                -d ai-cv-evaluator.web.id \
                --email '$LETSENCRYPT_EMAIL' --agree-tos --non-interactive --keep-until-expiring || true
            fi
          '

      - name: Enable HTTPS server block and reload Nginx
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            cd ~/ai-cv-evaluator
            if [ -f deploy/nginx/conf.d/app-https.conf.template ]; then
              cp -f deploy/nginx/conf.d/app-https.conf.template deploy/nginx/conf.d/app-https.conf
              if [ -f deploy/nginx/conf.d/app-http-redirect.conf.template ]; then
                cp -f deploy/nginx/conf.d/app-http-redirect.conf.template deploy/nginx/conf.d/app-http.conf
              fi
              docker compose exec -T nginx nginx -s reload || true
            fi
          '
      
      - name: Post-deployment verification (production)
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            cd ~/ai-cv-evaluator
            
            # Check all services are running
            echo "=== Service Status ==="
            docker compose -f docker-compose.prod.yml ps
            
            # Check application health endpoints (via Nginx)
            echo "=== Health Checks ==="
            curl -f http://localhost/healthz && echo "✓ Health check passed"
            curl -f http://localhost/readyz && echo "✓ Readiness check passed"
            
            # Check logs for any immediate errors
            echo "=== Recent Logs ==="
            docker compose logs --tail=50 app
          '
      
      - name: Cleanup old images
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            # Remove old images (keep last 3)
            docker images ghcr.io/${{ github.repository }} --format "table {{.Tag}}\t{{.ID}}" | tail -n +4 | awk "{print \$2}" | xargs -r docker rmi || true
            
            # Clean up unused images and volumes
            docker system prune -f
          '

  # Slack notifications intentionally omitted; see Windsurf rules for rationale
